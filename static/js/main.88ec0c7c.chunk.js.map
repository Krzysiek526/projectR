{"version":3,"sources":["components/Signin/Signin.js","components/Register/Register.js","components/Navigation/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["Signin","onRouteChange","className","id","htmlFor","type","name","onClick","value","Register","Navigation","isSignedIn","style","display","justifyContent","App","route","setState","state","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.88ec0c7c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\n\r\nconst Signin = ({ onRouteChange }) => {\r\n    return (\r\n        <article className=\"br3 ba dark-gray b--black-10 mv4 w-100 w-50-m w-25-l mw5 center\">\r\n            <main className=\"pa4 black-80\">\r\n                <div className=\"measure\">\r\n                    <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                        <legend className=\"f1 fw6 ph0 mh0\">Sign In</legend>\r\n                        <div className=\"mt3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                            <input className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"email\" name=\"email-address\" id=\"email-address\" />\r\n                        </div>\r\n                        <div className=\"mv3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                            <input className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"password\" name=\"password\" id=\"password\" />\r\n                        </div>\r\n                    </fieldset>\r\n                    <div className=\"\">\r\n                        <input\r\n                            onClick={() => onRouteChange('home')}\r\n                            className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\"\r\n                            type=\"submit\"\r\n                            value=\"Sign in\" />\r\n                    </div>\r\n                    <div className=\"lh-copy mt3\">\r\n                        <p onClick={() => onRouteChange('register')} className=\"f6 link dim black db pointer\">Register</p>\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        </article>\r\n    )\r\n}\r\n\r\nexport default Signin","import React from 'react'\r\n\r\n\r\n\r\nconst Register = ({ onRouteChange }) => {\r\n    return (\r\n        <article className=\"br3 ba dark-gray b--black-10 mv4 w-100 w-50-m w-25-l mw5 center\">\r\n            <main className=\"pa4 black-80\">\r\n                <div className=\"measure\">\r\n                    <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                        <legend className=\"f1 fw6 ph0 mh0\">Register</legend>\r\n                        <div className=\"mt3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"name\">Name</label>\r\n                            <input className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"text\" name=\"name\" id=\"name\" />\r\n                        </div>\r\n                        <div className=\"mt3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                            <input className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"email\" name=\"email-address\" id=\"email-address\" />\r\n                        </div>\r\n                        <div className=\"mv3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                            <input className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"password\" name=\"password\" id=\"password\" />\r\n                        </div>\r\n                    </fieldset>\r\n                    <div className=\"\">\r\n                        <input\r\n                            onClick={() => onRouteChange('home')}\r\n                            className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\"\r\n                            type=\"submit\"\r\n                            value=\"Register\" />\r\n                    </div>\r\n                    <div className=\"lh-copy mt3\">\r\n                        <p onClick={() => onRouteChange('signin')} className=\"f6 link dim black db pointer\">Sign In</p>\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        </article>\r\n    )\r\n}\r\n\r\nexport default Register","import React from 'react'\r\n\r\n\r\nconst Navigation = ({ onRouteChange, isSignedIn }) => {\r\n    if (isSignedIn) {\r\n        return (\r\n            <nav style={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n                <p onClick={() => onRouteChange('signout')} className='f3 link dim black underline pa3 pointer'>Sign Out</p>\r\n            </nav>\r\n        );\r\n    } else {\r\n        return (\r\n            <nav style={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n                <p onClick={() => onRouteChange('signin')} className='f3 link dim black underline pa3 pointer'>Sign In</p>\r\n                <p onClick={() => onRouteChange('register')} className='f3 link dim black underline pa3 pointer'>Register</p>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navigation","import React, { Component } from 'react';\nimport Signin from './components/Signin/Signin'\nimport Register from './components/Register/Register'\nimport Navigation from './components/Navigation/Navigation'\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      route: 'signin',\n      isSignedIn: false\n    }\n  }\n\n  onRouteChange = (route) => {\n    if (route === 'signout') {\n      this.setState({ isSignedIn: false })\n    } else if (route === 'home') {\n      this.setState({ isSignedIn: true })\n    }\n    this.setState({ route: route });\n  }\n\n  render() {\n    const { isSignedIn, route } = this.state;\n    return (\n      <div>\n        <Navigation isSignedIn={isSignedIn} onRouteChange={this.onRouteChange} />\n        {route === 'home'\n          ? <div>\n\n          </div>\n          : (\n            route === 'signin'\n              ? <Signin onRouteChange={this.onRouteChange} />\n              : <Register onRouteChange={this.onRouteChange} />\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'; //imporotowanie tachyons do css\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}